[color]
  status = auto
  branch = auto
[core]
  excludesfile = ~/.gitignore
[status]
	submoduleSummary = true
[diff]
  compactionHeuristic = true
[push]
  default = simple
[pull]
	rebase = preserve
[alias]
  ds = diff --staged                                                                 #  git ds - Diff your staged changes == review before committing.
  st = status -sb                                                                    #  Smarter status - include tag and branch info
  fup = log --since '1 day ago' --oneline "--author=$(git config --get user.email)"  #  Know what you did yesterday
  session = "!git diff --name-only -z | xargs -0 bash -c '</dev/tty open \"$@\"' x"  #  Open all modified tracked files within the current repo
  user = "!bash -c -l \"gituser $1\""                                                #  Set the user profile to be used when commiting by using the gituser function defined in ~/.profile

  # Reset Helpers
  # -------------
  r = reset
  unstage = reset HEAD
  uncommit = reset --soft HEAD~1
  undo = checkout HEAD -- 
  undoall = checkout -f
  r1 = reset HEAD^
  r2 = reset HEAD^^
  rh = reset --hard
  rh1 = reset HEAD^ --hard
  rh2 = reset HEAD^^ --hard

  # Basic Shortcuts
  # ---------------
  cp = cherry-pick
  cl = clone
  c = commit
  cs = commit -S
  co = checkout
  br = branch
  diff = diff --word-diff
  dc = diff --cached
  a = add
  aa = add --all
  A = add -A
  au = add -u

  # Stash Shortcuts
  # ---------------
  sl = stash list
  sa = stash apply
  ss = stash save

  # Logs
  # ----
  l = log
  ls = log --pretty=format:\"%C(yellow)%h %C(blue)%ad%C(red)%d %C(reset)%s%C(green) [%cn]\" --decorate --date=short                       #  Pretty one-line log with tags, branches and authors
  lsv = log --pretty=format:\"%C(yellow)%h %C(blue)%ad%C(red)%d %C(reset)%s%C(green) [%cn]\" --decorate --date=short --numstat            #  A verbose ls, shows changed files too
  sig = log --pretty=format:\"%C(yellow)%h %C(blue)%ad%C(red)%d %C(reset)%s%C(green) [%cn]\" --decorate --date=short --show-signature -1  #  Check for GPG signatures
  lh = log --graph
  la = !git lh --date-order --all 2> /dev/null
  lb = log --graph --simplify-by-decoration
  lba = !git lb --all

	# External Commands
	# -----------------
  # Generate a .gitignore based on given arguments ( For list of arguments do: gi list )
  # e.g.: git ignore osx, php, node, wordpress >> .gitignore
	ignore = "!gi() { curl -L -s https://www.gitignore.io/api/$@ ;}; gi"
